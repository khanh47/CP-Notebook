//              ĐIỀU KIỆN ĐỂ CÓ CHU TRÌNH, ĐƯỜNG ĐI EULER:
//          ĐỒ THỊ VÔ HƯỚNG
//      Chu trình euler:
// Các đỉnh có bậc khác 0 của đồ thị liên thông với nhau
// Tất cả các đỉnh đều có bậc chẵn
//
//      Đường đi euler: 
// Các đỉnh có bậc khác 0 của đồ thị liên thông với nhau
// Đồ thị có 2 đỉnh có bậc lẻ và mọi đỉnh còn lại đều có bậc chẵn: đường đi sẽ bắt đầu từ đỉnh có bậc lẻ thứ 1 và kết thúc ở đỉnh có bậc lẻ thứ 2.
//
//          ĐỒ THỊ CÓ HƯỚNG
//      Chu trình euler:
// Các đỉnh có bậc khác 0 của đồ thị liên thông với nhau
// Tất cả các đỉnh đều có bán bậc vào = bán bậc ra
//
//      Đường đi euler: 
// Các đỉnh có bậc khác 0 của đồ thị liên thông với nhau
// Tồn tại 2 đỉnh u, v mà deg+(u) – deg-(u) = 1 và deg+(v) – deg-(v) = -1 và mọi đỉnh còn lại đều có bán bậc ra = bán bậc vào. Khi đó, đường đi sẽ bắt đầu từ đỉnh u và kết thúc ở đỉnh v.

int numNode, numEdge;
stack<int> st;
vector<int> edge[MAX], ec;
int in[MAX];
 
void euler(int u){
    st.push(u);
    while (!st.empty()){
        int u = st.top();
        if (edge[u].empty()){
            st.pop();
            ec.eb(u);
            continue;
        }
        int v = edge[u].back();
        st.push(v);
        edge[u].pop_back();
    }
    reverse(ALL(ec));
}
 
bool check(int u, int v){
    // euler path
    // if (edge[u].size() - in[u] != 1 || in[v] - edge[v].size() != 1)
    //     return false;
    FOR (i, 2, numNode - 1)
        if (edge[i].size() != in[i])
            return false;
    return true;
}
 
void solve(){
    if (!check(1, numNode)){
        printf("IMPOSSIBLE");
        return;
    }
    euler(1);
    if (ec.size() <= numEdge){
        printf("IMPOSSIBLE");
        return;
    }
    for (int i : ec)
        printf("%d ", i);
}